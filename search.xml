<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/11/08/jvm/"/>
      <url>/2022/11/08/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM（Java-Virtual-Machine）是什么？"><a href="#JVM（Java-Virtual-Machine）是什么？" class="headerlink" title="JVM（Java Virtual Machine）是什么？"></a>JVM（Java Virtual Machine）是什么？</h2><p>参考文献：orcle官方对JVM的定义</p><p>The Java Virtual Machine：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-1.html#jvms-1.2">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-1.html#jvms-1.2</a></p><blockquote><p>The Java Virtual Machine is an <strong>abstract computing machine</strong>. Like a real computing machine, it has an instruction set and manipulates various memory areas at run time.</p><p>Java 虚拟机是一个抽象的计算机。像真正的计算机一样，它有一个指令集，并在运行时操作各种内存区域。</p></blockquote><blockquote><p>The Java Virtual Machine knows <strong>nothing of the Java programming language</strong>, <strong>only</strong> of a particular binary format, <strong>the class file format</strong>. A class file contains Java Virtual Machine instructions (or bytecodes) and a symbol table, as well as other ancillary information.</p><p>Java 虚拟机对 Java 编程语言一无所知，只知道特定的二进制格式，即类文件格式。类文件包含 Java 虚拟机指令（或字节码）和符号表以及其他辅助信息。</p></blockquote><p>通过前面两小段的翻译，我们得到两个重要的关键点</p><p>1、JVM类似操作系统，有特定的指令集操作内存</p><p>2、JVM能操作的特定文件只有class文件，与语言无关。</p><p>在学习JVM前我们也要对calss文件的内容结构进行了解，也能更好理解JVM是怎么工作的。</p><h2 id="认识class文件"><a href="#认识class文件" class="headerlink" title="认识class文件"></a>认识class文件</h2><p>参考文献：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html</a></p><p>class文件是二进制文件，但是我们平时看不到class文件的原样，因为我们使用的开发工具比如idea他帮我们进行了反编译。编译的class文件在out目录下。</p><p>借助工具看class文件结构 </p><p>1、idea插件BinEd（二进制文件）</p><blockquote><p>使用方法 </p><p>File-Open as Binary - 选择class文件路径即可</p></blockquote><p>打开如下：</p><p><img src="https://blog-sofia.oss-cn-shanghai.aliyuncs.com/jvm/BinEd.png?Expires=1667890168&amp;OSSAccessKeyId=TMP.3KgF1m4Y7Qcz1WNC5E2u2pJ5on3GA4ucN4x5S9SDcrE8aeQuNLLVmpduVxmK36uMWkfEsZmnpDEbfrXG1ZQm5VRuRyvh4j&amp;Signature=Y6HIWb+w8Su/tkboqmCgSlCjK0o="></p><p>2、idea插件JClassLib （把二进制文件用具体的指令显现出来）</p><blockquote><p>使用方法</p><p>光标在.java文件的名称上-view-Show Bytecode With Jclasslib即可</p></blockquote><p>打开如下：</p><p><img src="https://blog-sofia.oss-cn-shanghai.aliyuncs.com/jvm/JClassLib%20.jpg?Expires=1667890124&amp;OSSAccessKeyId=TMP.3KgF1m4Y7Qcz1WNC5E2u2pJ5on3GA4ucN4x5S9SDcrE8aeQuNLLVmpduVxmK36uMWkfEsZmnpDEbfrXG1ZQm5VRuRyvh4j&amp;Signature=cAYvlw1XvaHlwUjED71OWGp0psY="></p><p>3、**javap -v -p XXX.class **同样可以查看class文件的具体信息</p><h3 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;ClassFile {   u4             magic;魔术(4个字节)-cafebaby    u2             minor_version;次要版本(2个字节)-0000   u2             major_version;主要版本(2个字节)-0034   u2             constant_pool_count;常量池数量(2个字节)-0010   cp_info        constant_pool[constant_pool_count-1];常量池   u2             access_flags;访问标志(2个字节)-0a常量池表中第一位的索引，代表10 CONSTANT_Methodref_info   u2             this_class;本类对象索引   u2             super_class;父类对象索引   u2             interfaces_count;接口数量   u2             interfaces[interfaces_count];接口   u2             fields_count;字段数量   field_info     fields[fields_count];字段   u2             methods_count;方法数量   method_info    methods[methods_count];方法   u2             attributes_count;其他数量   attribute_info attributes[attributes_count];&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="类加载过程（class-loading-linking-initializing）"><a href="#类加载过程（class-loading-linking-initializing）" class="headerlink" title="类加载过程（class loading linking initializing）"></a>类加载过程（class loading linking initializing）</h2><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><blockquote><p>查找和导入class文件*</p><p>双亲委派方式把class文件加载到内存</p></blockquote><p>通过<strong>类加载器</strong>获取此类的二进制字节流，并将这个字节流所代表的<strong>静态存储结构</strong>转化为方法区的运行时数据结构</p><p>同时，在Java堆中生成一个代表这个类的java.lang.Class对象</p><blockquote><p>方法区：类信息，静态变量，常量</p><p>堆：代表被加载类的java.lang.Class对象</p></blockquote><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p><img src="https://blog-sofia.oss-cn-shanghai.aliyuncs.com/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.jpg?Expires=1667890105&amp;OSSAccessKeyId=TMP.3KgF1m4Y7Qcz1WNC5E2u2pJ5on3GA4ucN4x5S9SDcrE8aeQuNLLVmpduVxmK36uMWkfEsZmnpDEbfrXG1ZQm5VRuRyvh4j&amp;Signature=85wVlM3TOe2X2+MrgatAm0F0+sI="></p><h4 id="加载器加载的顺序-双亲委派机制"><a href="#加载器加载的顺序-双亲委派机制" class="headerlink" title="加载器加载的顺序-双亲委派机制"></a>加载器加载的顺序-双亲委派机制</h4><p>是指子类加载器如果没有加载过该目标类，就先委托父类加载器加载该目标类，只有在父类加载器找不到字节码文件的情况下才从自己的类路径中查找并装载目标类。<img src="https://blog-sofia.oss-cn-shanghai.aliyuncs.com/jvm/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.jpg?Expires=1667889547&amp;OSSAccessKeyId=TMP.3KgF1m4Y7Qcz1WNC5E2u2pJ5on3GA4ucN4x5S9SDcrE8aeQuNLLVmpduVxmK36uMWkfEsZmnpDEbfrXG1ZQm5VRuRyvh4j&amp;Signature=33eIT+K2+FGq9ZOkBQYcHafDKXo="></p><blockquote><p>缓存机制，缓存机制将会保证所有加载过的Class都将在内存中缓存，当程序中需要使用某个Class时，类加载器先从内存的缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就为什么修改了Class后，必须重启JVM，程序的修改才会生效.对于一个类加载器实例来说，相同全名的类只加载一次，loadClass方法不会被重复调用</p></blockquote><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><p>ExtClassLoader和AppClassLoader类上继承ClassLoader</p><p><img src="https://blog-sofia.oss-cn-shanghai.aliyuncs.com/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%B1%BB%E4%B8%8A%E7%BB%A7%E6%89%BF.png?Expires=1667891917&amp;OSSAccessKeyId=TMP.3KgF1m4Y7Qcz1WNC5E2u2pJ5on3GA4ucN4x5S9SDcrE8aeQuNLLVmpduVxmK36uMWkfEsZmnpDEbfrXG1ZQm5VRuRyvh4j&amp;Signature=GXO+M9bU03RNKv/kqvSzKzoWq5Y="></p><p>通过查看ClassLoader源码，发现找class路径的终点是findClass（）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Finds the class with the specified &lt;a href="#name"&gt;binary name&lt;/a&gt;.    * This method should be overridden by class loader implementations that    * follow the delegation model for loading classes, and will be invoked by    * the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method after checking the    * parent class loader for the requested class.  The default implementation    * throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.    *    * @param  name    *         The &lt;a href="#name"&gt;binary name&lt;/a&gt; of the class    *    * @return  The resulting &lt;tt&gt;Class&lt;/tt&gt; object    *    * @throws  ClassNotFoundException    *          If the class could not be found    *    * @since  1.2    */</span>   <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> root<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classData <span class="token operator">=</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//此方法负责将二进制的字节码转换为Class对象</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> classData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> root <span class="token operator">+</span>                <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar <span class="token operator">+</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">InputStream</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> ins<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoot</span><span class="token punctuation">(</span><span class="token class-name">String</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// classLoader.setRoot("D:\\codes\\jvm-case\\src\\main\\java");</span>        classLoader<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> testClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">// testClass = classLoader.loadClass("com.example.jvmcase.basic.Test");</span>            testClass <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> object <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="linking"><a href="#linking" class="headerlink" title="linking"></a>linking</h3><h4 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h4><blockquote><p> 检查class文件是否符合java虚拟机的规范。比如class文件是否以cafebaby开头</p></blockquote><h4 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h4><blockquote><p>类的静态变量分配内存，并将其初始化为默认值</p></blockquote><p>注意：此阶段不包括<strong>final</strong>修饰的静态变量，final在编译的时候就分配了，准备阶段会显式初始化。不会为<strong>实例变量</strong>初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中</p><h3 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h3><blockquote><p>把类中的符号引用转换为直接引用</p></blockquote><p>符号引用就是一组符号来描述目标，可以是任何字面量。</p><p>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p><h3 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h3><blockquote><p>执行类构造器()方法的过程</p></blockquote><h2 id="Runtime-Data-Area-and-Instruction-Set"><a href="#Runtime-Data-Area-and-Instruction-Set" class="headerlink" title="Runtime Data Area and Instruction Set"></a>Runtime Data Area and Instruction Set</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建</title>
      <link href="/2022/11/07/bo-ke-de-da-jian/"/>
      <url>/2022/11/07/bo-ke-de-da-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h3><blockquote><p>学习的时候经常看见大佬们的博客，很羡慕呀。终于今天动手创建了自己的博客，好好记录我踩过的坑和搭建的步骤。</p></blockquote><h4 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h4><p>刚开始建博客的时候，看了很多类似的教学视频，只会一步一步傻瓜式的跟着别人的步骤做，回头来看，并不是自己想要的样子。所以我觉得在做一件事前还是先理清楚自己的思路。</p><h6 id="1、关于博客项目"><a href="#1、关于博客项目" class="headerlink" title="1、关于博客项目"></a>1、关于博客项目</h6><p>​根据自己的实际情况和需求，选择自己全栈做一个博客项目</p><p>还是使用成熟的博客框架模板。</p><blockquote><p>成熟的博客框架能帮助你快速搭建好一个博客<br>常见博客框架模板:<br>Hexo:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>wordpress：<a href="https://wordpress.org/">https://wordpress.org/</a><br>vuepress：<a href="https://vuepress.vuejs.org/">https://vuepress.vuejs.org/</a></p></blockquote><p>通过对比不同框架做出来的效果，个人还是比较喜欢hexo的模板，所以我用的是Hexo框架搭建的静态博客。其实我一直想自己写博客项目，但觉得自己写的前端页面会比较丑，还是暂时先放弃了，以后希望能实现。</p><h6 id="2、关于博客部署"><a href="#2、关于博客部署" class="headerlink" title="2、关于博客部署"></a>2、关于博客部署</h6><p>博客创建好了后，怎么能让别人看到？而不只是自己本地浏览</p><blockquote><p>1、借助第三方平台的服务器<br>将博客项目部署到GitHub或者Gitee仓库上，通过Github Pages 服务或者Gitee Pages服务，就不需要单独购买域名和服务器，通过平台提供的域名就可以访问自己的网站<br>2、购买云服务器、购买域名<br>域名：推荐阿里云<br>云服务器：推荐腾讯云、阿里云</p></blockquote><p>我是买了域名和云服务器，但是云服务器抛了很多系统漏洞，暂时还没解决不敢用。因此我是结合Hexo框架+github page + 域名</p><h4 id="建立过程"><a href="#建立过程" class="headerlink" title="建立过程"></a>建立过程</h4><h5 id="STEP-1-下载等其他准备"><a href="#STEP-1-下载等其他准备" class="headerlink" title="STEP 1 下载等其他准备"></a>STEP 1 下载等其他准备</h5><p>Git     <a href="https://git-scm.com/">https://git-scm.com/</a>       安装步骤</p><p>Node.js<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>安装步骤</p><p>Github <a href="https://github.com/">https://github.com/</a> 注册步骤</p><h5 id="STEP-2-Github上创建映射仓库"><a href="#STEP-2-Github上创建映射仓库" class="headerlink" title="STEP 2 Github上创建映射仓库"></a>STEP 2 Github上创建映射仓库</h5><p>仓库名一定要是.github.io</p><h5 id="STEP-3安装Hexo，本地能运行"><a href="#STEP-3安装Hexo，本地能运行" class="headerlink" title="STEP 3安装Hexo，本地能运行"></a>STEP 3安装Hexo，本地能运行</h5><h5 id="STEP-4Hexo部署到github"><a href="#STEP-4Hexo部署到github" class="headerlink" title="STEP 4Hexo部署到github"></a>STEP 4Hexo部署到github</h5><h5 id="STEP-5更改博客主题"><a href="#STEP-5更改博客主题" class="headerlink" title="STEP 5更改博客主题"></a>STEP 5更改博客主题</h5><p>参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md"><strong>hexo-theme-matery</strong></a>主题，跟着里面步骤一步一步做。亲测有效。</p><h5 id="STEP-6创建第一篇博客"><a href="#STEP-6创建第一篇博客" class="headerlink" title="STEP 6创建第一篇博客"></a>STEP 6创建第一篇博客</h5><pre class="line-numbers language-none"><code class="language-none">hexo new "博客的搭建"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="报错解答"><a href="#报错解答" class="headerlink" title="报错解答"></a>报错解答</h4><h5 id="一、无法在本地安装hexo"><a href="#一、无法在本地安装hexo" class="headerlink" title="一、无法在本地安装hexo"></a>一、无法在本地安装hexo</h5><p>打开npm管理权限</p><h5 id="二、Hexo，本地运行时打不开"><a href="#二、Hexo，本地运行时打不开" class="headerlink" title="二、Hexo，本地运行时打不开"></a>二、Hexo，本地运行时打不开</h5><blockquote><p>有可能是端口被占用</p></blockquote><pre class="line-numbers language-none"><code class="language-none">hexo server -p 8000   //修改hexo端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="三、git-clone出现-fatal-unable-to-access-‘https-github-com-39"><a href="#三、git-clone出现-fatal-unable-to-access-‘https-github-com-39" class="headerlink" title="三、git clone出现 fatal: unable to access ‘https://github.com...'"></a>三、git clone出现 fatal: unable to access ‘<a href="https://github.com...&amp;/#39;">https://github.com...'</a></h5><p><a href="https://blog.csdn.net/dashi_lu/article/details/89641778">解决方法</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
